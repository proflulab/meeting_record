import { NextResponse } from 'next/server';

// ÁºìÂ≠òÊï∞ÊçÆÂíåÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
let cachedData: any = null;
let lastUpdateTime = 0;
let lastDataItems: any[] = [];
const CACHE_DURATION = 30 * 1000; // 30ÁßíÁöÑÁºìÂ≠òÊó∂Èó¥

// ÊØîËæÉÊï∞ÊçÆÂèòÊõ¥ÁöÑÂáΩÊï∞
function compareDataChanges(oldItems: any[], newItems: any[]) {
    // ÂàõÂª∫ÊóßËÆ∞ÂΩïÁöÑÊò†Â∞ÑÔºåÁî®‰∫éÂø´ÈÄüÊü•Êâæ
    const oldItemsMap = new Map(oldItems.map(item => [item.record_id, item]));
    const changes: { type: 'new' | 'modified', record: any, changes?: { field: string, oldValue: any, newValue: any }[] }[] = [];

    // Ê£ÄÊü•Êñ∞Â¢ûÂíå‰øÆÊîπÁöÑËÆ∞ÂΩï
    newItems.forEach(newItem => {
        const oldItem = oldItemsMap.get(newItem.record_id);
        
        if (!oldItem) {
            // Êñ∞Â¢ûÁöÑËÆ∞ÂΩï
            changes.push({
                type: 'new',
                record: newItem
            });
        } else {
            // Ê£ÄÊü•Â≠óÊÆµÊòØÂê¶Êúâ‰øÆÊîπ
            const fieldChanges = Object.entries(newItem.fields).reduce((acc: any[], [field, value]) => {
                if (JSON.stringify(oldItem.fields[field]) !== JSON.stringify(value)) {
                    acc.push({
                        field,
                        oldValue: oldItem.fields[field],
                        newValue: value
                    });
                }
                return acc;
            }, []);

            if (fieldChanges.length > 0) {
                changes.push({
                    type: 'modified',
                    record: newItem,
                    changes: fieldChanges
                });
            }
        }
    });

    // ËæìÂá∫ÂèòÊõ¥‰ø°ÊÅØ
    const timestamp = new Date().toLocaleString();
    console.log('\nüîÑ ==================== Êï∞ÊçÆÊØîÂØπÁªìÊûú ====================');
    console.log(`üìÖ ÊØîÂØπÊó∂Èó¥: ${timestamp}`);
    console.log(`üìä ÊØîÂØπÊï∞ÊçÆ: Êñ∞Êï∞ÊçÆ ${newItems.length} Êù° vs ÊóßÊï∞ÊçÆ ${oldItems.length} Êù°`);
    
    if (changes.length > 0) {
        console.log('\n‚ú® Ê£ÄÊµãÂà∞Êï∞ÊçÆÂèòÊõ¥Ôºö');
        changes.forEach((change, index) => {
            console.log('\nüìù ----------------------------------------');
            console.log(`üîç ÂèòÊõ¥ËÆ∞ÂΩï #${index + 1}`);
            console.log(`üÜî ËÆ∞ÂΩïID: ${change.record.record_id}`);
            if (change.type === 'new') {
                console.log('üìå Á±ªÂûã: ‚ûï Êñ∞Â¢ûËÆ∞ÂΩï');
                console.log('üìã ËÆ∞ÂΩïÂÜÖÂÆπ:\n', JSON.stringify(change.record.fields, null, 2));
            } else {
                console.log('üìå Á±ªÂûã: üîÑ ËÆ∞ÂΩïÊõ¥Êñ∞');
                console.log('üìã ÂèòÊõ¥Â≠óÊÆµ:');
                change.changes?.forEach(fieldChange => {
                    console.log(`  üìé ${fieldChange.field}:`);
                    console.log('    ‚¨áÔ∏è  ÂéüÂÄº:', JSON.stringify(fieldChange.oldValue, null, 2));
                    console.log('    ‚¨ÜÔ∏è  Êñ∞ÂÄº:', JSON.stringify(fieldChange.newValue, null, 2));
                });
            }
        });
        console.log('\nüìä ----------------------------------------');
        console.log(`‚úÖ ÂÖ±ÂèëÁé∞ ${changes.length} Êù°ÂèòÊõ¥ËÆ∞ÂΩï`);
    } else {
        console.log('\n‚úÖ Êú¨Ê¨°ÊØîÂØπÊú™Ê£ÄÊµãÂà∞Êï∞ÊçÆÂèòÊõ¥');
    }
    console.log('\n==================== Êï∞ÊçÆÊØîÂØπÁªìÊùü ====================\n');
}

// Ëé∑ÂèñÈ£û‰π¶Êï∞ÊçÆÁöÑÂáΩÊï∞
async function fetchFeishuData() {
    const FEISHU_APP_TOKEN = process.env.NEXT_PUBLIC_FEISHU_APP_ID;
    const FEISHU_TABLE_ID = process.env.NEXT_PUBLIC_FEISHU_TABLE_ID;
    const FEISHU_ACCESS_TOKEN = process.env.NEXT_PUBLIC_FEISHU_APP_SECRET;

    console.log('\nüöÄ Ê≠£Âú®‰ªéÈ£û‰π¶APIËé∑ÂèñÊï∞ÊçÆ...');
    console.log('üîó ËØ∑Ê±ÇURL:', `https://base-api.larksuite.com/open-apis/bitable/v1/apps/${FEISHU_APP_TOKEN}/tables/${FEISHU_TABLE_ID}/records`);

    const response = await fetch(
        `https://base-api.larksuite.com/open-apis/bitable/v1/apps/${FEISHU_APP_TOKEN}/tables/${FEISHU_TABLE_ID}/records`,
        {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FEISHU_ACCESS_TOKEN}`,
                'Content-Type': 'application/json'
            }
        }
    );

    if (!response.ok) {
        console.error('È£û‰π¶APIËØ∑Ê±ÇÂ§±Ë¥•:', {
            status: response.status,
            statusText: response.statusText
        });
        throw new Error(`È£û‰π¶APIËØ∑Ê±ÇÂ§±Ë¥•: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log('\n‚úÖ APIË∞ÉÁî®ÊàêÂäüÔºÅËé∑ÂèñÂà∞ÁöÑÊï∞ÊçÆ:', {
        status: response.status,
        code: data.code,
        msg: data.msg,
        total: data?.data?.total || 0,
        items: data?.data?.items?.map(item => ({
            record_id: item.record_id,
            fields: item.fields
        })) || []
    });
    return data;
}

// ÂÆöÊó∂Êõ¥Êñ∞ÁºìÂ≠òÁöÑÂáΩÊï∞
async function updateCache() {
    try {
        console.log('\nüîÑ ==================== È£û‰π¶Êï∞ÊçÆÁºìÂ≠òÊõ¥Êñ∞ ====================');
        console.log('‚è∞ ÂºÄÂßãÊó∂Èó¥:', new Date().toLocaleString());
        console.log('‚åõ Ë∑ùÁ¶ª‰∏äÊ¨°Êõ¥Êñ∞:', lastUpdateTime ? `${(Date.now() - lastUpdateTime) / 1000}Áßí` : 'È¶ñÊ¨°Êõ¥Êñ∞');
        const newData = await fetchFeishuData();
        
        // ÊØîËæÉÊï∞ÊçÆÂèòÊõ¥
        if (newData?.data?.items) {
            compareDataChanges(lastDataItems, newData.data.items);
            lastDataItems = newData.data.items;
            // Trigger update in feishu-fill
            await updateFeishuFill(newData.data.items);
        }
        
        cachedData = newData;
        lastUpdateTime = Date.now();
        console.log('\n‚è∞ Êõ¥Êñ∞ÂÆåÊàêÊó∂Èó¥:', new Date(lastUpdateTime).toLocaleString());
        console.log('üìä Ëé∑ÂèñÂà∞ÁöÑÊï∞ÊçÆÊù°Êï∞:', newData?.data?.items?.length || 0);
        console.log('==================== Êõ¥Êñ∞ÁªìÊùü ====================\n');
    } catch (error) {
        console.error('ÁºìÂ≠òÊõ¥Êñ∞Â§±Ë¥•:', error);
        throw error; // Âêë‰∏ä‰º†ÈÄíÈîôËØØ‰ª•‰æøÂú®APIÂìçÂ∫î‰∏≠Â§ÑÁêÜ
    }
}

// ÂàùÂßãÂåñÁºìÂ≠òÊõ¥Êñ∞ÂÆöÊó∂Âô®
if (typeof setInterval !== 'undefined') {
    console.log('\n‚ö° ==================== ÂàùÂßãÂåñÈ£û‰π¶Êï∞ÊçÆÁºìÂ≠òÂÆöÊó∂Âô® ====================');
    console.log('‚è±Ô∏è  ÁºìÂ≠òÊõ¥Êñ∞Èó¥Èöî:', CACHE_DURATION / 1000, 'Áßí');
    console.log('==================== ÂàùÂßãÂåñÂÆåÊàê ====================\n');
    setInterval(updateCache, CACHE_DURATION);
}

export async function GET() {
    try {
        // Â¶ÇÊûúÁºìÂ≠ò‰∏çÂ≠òÂú®ÊàñÂ∑≤ËøáÊúüÔºåÂàôÊõ¥Êñ∞ÁºìÂ≠ò
        if (!cachedData || Date.now() - lastUpdateTime >= CACHE_DURATION) {
            await updateCache();
        }

        // ‰ΩøÁî®ÁºìÂ≠òÁöÑÊï∞ÊçÆ
        const data = cachedData;

        return new NextResponse(JSON.stringify(data), {
            status: 200,
            headers: {
                'Access-Control-Allow-Origin': 'http://localhost:3003',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Content-Type': 'application/json',
            },
        });
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        return new NextResponse(JSON.stringify({ error: `Failed to fetch data: ${errorMessage}` }), {
            status: 500,
            headers: {
                'Access-Control-Allow-Origin': 'http://localhost:3003',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Content-Type': 'application/json',
            },
        });
    }
}

export async function OPTIONS() {
    return new NextResponse(null, {
        status: 204,
        headers: {
            'Access-Control-Allow-Origin': 'http://localhost:3003',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
    });
}